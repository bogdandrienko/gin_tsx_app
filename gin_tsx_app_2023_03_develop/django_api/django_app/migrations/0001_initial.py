# Generated by Django 4.1.7 on 2023-02-28 04:14

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ActionModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.SlugField(blank=True, db_column='action_db_column', db_tablespace='action_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted underline">SlugField [0, 300]</small><hr><br>', max_length=300, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Действие')),
            ],
            options={
                'verbose_name': 'Действие',
                'verbose_name_plural': 'Admin 3, Действия',
                'db_table': 'action_model_table',
                'ordering': ('action',),
            },
        ),
        migrations.CreateModel(
            name='GroupModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(blank=True, db_column='name_db_column', db_tablespace='name_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted underline">SlugField [0, 300]</small><hr><br>', max_length=300, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Имя')),
                ('actions', models.ManyToManyField(blank=True, db_column='actions_db_column', db_index=True, db_tablespace='actions_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted underline">ManyToManyField</small><hr><br>', related_name='group_actions', to='django_app.actionmodel', verbose_name='Действия')),
            ],
            options={
                'verbose_name': 'Группа расширенная',
                'verbose_name_plural': 'Admin 2, Группы расширение',
                'db_table': 'group_extend_model_table',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='SettingsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('logging_action', 'Логирование действий в базу ("logging_action=True/False")'), ('print_action', 'Вывод в консоль действий ("print_action=True/False")'), ('logging_error', 'Логирование ошибок в базу ("logging_error=True/False")'), ('print_error', 'Вывод в консоль ошибок ("print_error=True/False")'), ('logging_response', 'Логирование ответов в базу ("logging_response=True/False")'), ('print_response', 'Вывод в консоль ответов ("print_response=True/False")'), ('scheduler_personal', 'Планировщик обновления персонала из 1С'), ('scheduler_superuser', 'Планировщик создания стандартных суперпользователей'), ('scheduler_group', 'Планировщик создания стандартных групп')], db_index=True, default='', help_text='<small class="text-muted">CharField [0, 300]</small><hr><br>', max_length=300, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Тип')),
                ('value', models.CharField(blank=True, default='', help_text='<small class="text-muted">CharField [0, 500]</small><hr><br>', max_length=500, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(500)], verbose_name='Параметр')),
            ],
            options={
                'verbose_name': 'Настройка',
                'verbose_name_plural': 'Admin 4, Настройки',
                'db_table': 'settings_admin_model_table',
                'ordering': ('type',),
            },
        ),
        migrations.CreateModel(
            name='Todo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, db_column='title_db_column', db_index=True, db_tablespace='title_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">CharField [0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Заголовок')),
                ('description', models.TextField(blank=True, db_column='description_db_column', db_index=True, db_tablespace='description_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">TextField [0, 3000]</small><hr><br>', max_length=3000, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(3000)], verbose_name='Описание')),
                ('avatar', models.ImageField(blank=True, db_column='avatar_db_column', db_index=True, db_tablespace='avatar_image_field_db_tablespace', default='uploads/todo/default_todo.jpg', error_messages=False, help_text='<small class="text-muted">>image_field</small><hr><br>', null=True, upload_to='uploads/todo/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png'])], verbose_name='Аватарка')),
                ('is_completed', models.BooleanField(blank=True, db_column='is_completed_db_column', db_index=True, db_tablespace='is_completed_db_tablespace', default=False, error_messages=False, help_text='<small class="text-muted">BooleanField</small><hr><br>', verbose_name='Статус выполнения')),
                ('created', models.DateTimeField(blank=True, db_column='created_db_column', db_index=True, db_tablespace='created_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">DateTimeField</small><hr><br>', null=True, verbose_name='Дата и время создания')),
                ('updated', models.DateTimeField(blank=True, db_column='updated_db_column', db_index=True, db_tablespace='updated_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">DateTimeField</small><hr><br>', null=True, verbose_name='Дата и время обновления')),
            ],
            options={
                'verbose_name': 'Todo',
                'verbose_name_plural': 'Todos',
                'db_table': 'django_app_todo_list_model_table',
                'ordering': ('-updated',),
            },
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active_account', models.BooleanField(blank=True, db_column='is_active_account_db_column', db_index=True, db_tablespace='is_active_account_db_tablespace', default=True, error_messages=False, help_text='<small class="text-muted">BooleanField</small><hr><br>', verbose_name='Активность аккаунта')),
                ('email', models.EmailField(blank=True, db_column='email_db_column', db_index=True, db_tablespace='email_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">EmailField [0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Почта')),
                ('secret_question', models.CharField(blank=True, db_column='secret_question_db_column', db_index=True, db_tablespace='secret_question_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">CharField [0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Секретный вопрос')),
                ('secret_answer', models.CharField(blank=True, db_column='secret_answer_db_column', db_index=True, db_tablespace='secret_answer_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">CharField [0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Секретный ответ')),
                ('is_temp_password', models.BooleanField(blank=True, db_column='is_temp_password_db_column', db_index=True, db_tablespace='is_temp_password_db_tablespace', default=True, error_messages=False, help_text='<small class="text-muted">BooleanField</small><hr><br>', verbose_name='Пароль не изменён')),
                ('last_name', models.CharField(blank=True, db_column='last_name_db_column', db_index=True, db_tablespace='last_name_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">CharField [0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Фамилия')),
                ('first_name', models.CharField(blank=True, db_column='first_char_db_column', db_index=True, db_tablespace='first_char_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">CharField [0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Имя')),
                ('patronymic', models.CharField(blank=True, db_column='patronymic_db_column', db_index=True, db_tablespace='patronymic_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">CharField [0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Отчество')),
                ('personnel_number', models.SlugField(blank=True, db_column='personnel_number_db_column', db_tablespace='personnel_number_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">SlugField [0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Табельный номер')),
                ('subdivision', models.CharField(blank=True, db_column='subdivision_db_column', db_index=True, db_tablespace='subdivision_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">CharField [0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Подразделение')),
                ('workshop_service', models.CharField(blank=True, db_column='workshop_service_db_column', db_index=True, db_tablespace='workshop_service_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">CharField [0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Цех/Служба')),
                ('department_site', models.CharField(blank=True, db_column='department_site_db_column', db_index=True, db_tablespace='department_site_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">CharField [0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Отдел/Участок')),
                ('position', models.CharField(blank=True, db_column='position_db_column', db_index=True, db_tablespace='position_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">CharField [0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Должность')),
                ('category', models.CharField(blank=True, db_column='category_db_column', db_index=True, db_tablespace='category_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">CharField [0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Категория')),
                ('education', models.TextField(blank=True, db_column='education_db_column', db_index=True, db_tablespace='education_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">TextField [0, 3000]</small><hr><br>', max_length=3000, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(3000)], verbose_name='Образование')),
                ('achievements', models.TextField(blank=True, db_column='achievements_db_column', db_index=True, db_tablespace='achievements_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">TextField [0, 3000]</small><hr><br>', max_length=3000, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(3000)], verbose_name='Достижения')),
                ('biography', models.TextField(blank=True, db_column='biography_db_column', db_index=True, db_tablespace='biography_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">TextField [0, 3000]</small><hr><br>', max_length=3000, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(3000)], verbose_name='Биография')),
                ('hobbies', models.TextField(blank=True, db_column='hobbies_db_column', db_index=True, db_tablespace='hobbies_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">TextField [0, 3000]</small><hr><br>', max_length=3000, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(3000)], verbose_name='Увлечения')),
                ('image', models.ImageField(blank=True, db_column='image_db_column', db_index=True, db_tablespace='image_db_tablespace', default='default/account/default_avatar.jpg', error_messages=False, help_text='<small class="text-muted"ImageField [jpg, png]</small><hr><br>', max_length=200, null=True, upload_to='uploads/admin/account/avatar', validators=[django.core.validators.FileExtensionValidator(['jpg', 'png'])], verbose_name='Изображение')),
                ('user', models.OneToOneField(blank=True, db_column='user_db_column', db_tablespace='user_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">ForeignKey</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_model', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Пользователь расширение',
                'verbose_name_plural': 'Admin 1, Пользователи расширение',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='TokenModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(blank=True, db_column='token_db_column', db_index=True, db_tablespace='token_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">SlugField [0, 150]</small><hr><br>', max_length=150, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(150)], verbose_name='Токен')),
                ('created', models.DateTimeField(blank=True, db_column='created_db_column', db_index=True, db_tablespace='created_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">DateTimeField</small><hr><br>', null=True, verbose_name='Дата и время создания')),
                ('updated', models.DateTimeField(blank=True, db_column='updated_db_column', db_index=True, db_tablespace='updated_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">DateTimeField</small><hr><br>', null=True, verbose_name='Дата и время обновления')),
                ('user', models.OneToOneField(blank=True, db_column='user_db_column', db_tablespace='user_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">OneToOneField</small><hr><br>', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='token_user', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Токен',
                'verbose_name_plural': 'Admin 7, Токены',
                'db_table': 'django_app_token_model_table',
                'ordering': ('-updated',),
            },
        ),
        migrations.CreateModel(
            name='ResultList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, db_column='title_db_column', db_index=True, db_tablespace='title_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">CharField [0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Заголовок')),
                ('description', models.TextField(blank=True, db_column='description_db_column', db_index=True, db_tablespace='description_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">TextField [0, 3000]</small><hr><br>', max_length=3000, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(3000)], verbose_name='Описание')),
                ('is_pay', models.BooleanField(blank=True, db_column='is_pay_db_column', db_index=True, db_tablespace='is_pay_db_tablespace', default=False, error_messages=False, help_text='<small class="text-muted">BooleanField</small><hr><br>', verbose_name='Статус оплаты')),
                ('addiction_file_field', models.FileField(blank=True, db_column='addiction_file_field_db_column', db_index=True, db_tablespace='addiction_file_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">addiction_file_field</small><hr><br>', max_length=200, null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, upload_to='uploads/analizi/files/', validators=[django.core.validators.FileExtensionValidator(['docx', 'doc', 'pdf'])], verbose_name='Файл-приложение')),
                ('created', models.DateTimeField(blank=True, db_column='created_db_column', db_index=True, db_tablespace='created_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">DateTimeField</small><hr><br>', null=True, verbose_name='Дата и время создания')),
                ('updated', models.DateTimeField(blank=True, db_column='updated_db_column', db_index=True, db_tablespace='updated_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">DateTimeField</small><hr><br>', null=True, verbose_name='Дата и время обновления')),
                ('user', models.ForeignKey(blank=True, db_column='author_db_column', db_tablespace='author_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Пациент</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Пациент')),
            ],
            options={
                'verbose_name': 'Результат',
                'verbose_name_plural': 'Результаты',
                'ordering': ('-updated', 'created'),
            },
        ),
        migrations.CreateModel(
            name='NotificationModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, db_column='name_db_column', db_index=True, db_tablespace='name_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">CharField [0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Название')),
                ('place', models.CharField(blank=True, db_column='place_db_column', db_index=True, db_tablespace='place_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">CharField [0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Место')),
                ('description', models.TextField(blank=True, db_column='description_db_column', db_index=True, db_tablespace='description_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">TextField [0, 3000]</small><hr><br>', max_length=1000, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(1000)], verbose_name='Описание')),
                ('is_visible', models.BooleanField(blank=True, db_column='is_visible_db_column', db_index=True, db_tablespace='is_visible_db_tablespace', default=True, error_messages=False, help_text='<small class="text-muted">BooleanField</small><hr><br>', verbose_name='Видимость')),
                ('created', models.DateTimeField(blank=True, db_column='created_db_column', db_index=True, db_tablespace='created_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">DateTimeField</small><hr><br>', null=True, verbose_name='Дата создания')),
                ('updated', models.DateTimeField(blank=True, db_column='updated_db_column', db_index=True, db_tablespace='updated_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">DateTimeField</small><hr><br>', null=True, verbose_name='Дата скрытия')),
                ('author', models.ForeignKey(blank=True, db_column='author_db_column', db_tablespace='author_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">ForeignKey</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notification_author', to='django_app.usermodel', verbose_name='Автор')),
                ('target_group_model', models.ForeignKey(blank=True, db_column='target_group_model_db_column', db_tablespace='target_group_model_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">ForeignKey</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notification_target_group_model', to='django_app.groupmodel', verbose_name='Целевая группа')),
                ('target_user_model', models.ForeignKey(blank=True, db_column='target_user_model_db_column', db_tablespace='target_user_model_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">ForeignKey</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notification_target_author', to='django_app.usermodel', verbose_name='Целевой пользователь')),
            ],
            options={
                'verbose_name': 'Уведомление',
                'verbose_name_plural': 'Admin 6, Уведомления',
                'db_table': 'notification_model_table',
                'ordering': ('-updated',),
            },
        ),
        migrations.CreateModel(
            name='LoggingModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.SlugField(blank=True, db_column='username_db_column', db_tablespace='username_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">SlugField [0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Имя пользователя')),
                ('ip', models.GenericIPAddressField(blank=True, db_column='ip_db_column', db_index=True, db_tablespace='ip_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">ip[0, 300]</small><hr><br>', null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Ip адрес')),
                ('path', models.SlugField(blank=True, db_column='path_field_db_column', db_tablespace='path_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">SlugField [0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Путь')),
                ('method', models.SlugField(blank=True, db_column='method_field_db_column', db_tablespace='method_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">SlugField [0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Метод')),
                ('text', models.TextField(blank=True, db_column='text_db_column', db_index=True, db_tablespace='text_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">TextField [0, 3000]</small><hr><br>', max_length=3000, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(3000)], verbose_name='Текст ошибки/исключения/ответа')),
                ('created', models.DateTimeField(blank=True, db_column='created_db_column', db_index=True, db_tablespace='created_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">DateTimeField</small><hr><br>', null=True, verbose_name='Дата и время создания')),
                ('user', models.ForeignKey(blank=True, db_column='user_db_column', db_tablespace='user_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">ForeignKey</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Лог',
                'verbose_name_plural': 'Admin 5, Логи',
                'db_table': 'logging_admin_model_table',
                'ordering': ('-created',),
            },
        ),
        migrations.AddField(
            model_name='groupmodel',
            name='users',
            field=models.ManyToManyField(blank=True, db_column='users_db_column', db_index=True, db_tablespace='users_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted underline">ManyToManyField</small><hr><br>', related_name='group_users', to='django_app.usermodel', verbose_name='Пользователи'),
        ),
        migrations.CreateModel(
            name='ExamplesModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('positive_integer', models.PositiveIntegerField(auto_created=True, blank=True, db_column='positive_integer_db_column', db_index=True, db_tablespace='positive_integer_tablespace', default=0, help_text='<small class="text-muted">Положительное целочисленное значение от 0 до 2147483647, example: "0"</small><hr><br>', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2147483647)], verbose_name='positive_integer')),
                ('big_integer', models.BigIntegerField(auto_created=True, blank=True, db_column='big_integer_db_column', db_index=True, db_tablespace='big_integer_tablespace', default=0, help_text='<small class="text-muted">Большое целочисленное значение от -9223372036854775808 до 9223372036854775807, example: "0"</small><hr><br>', null=True, validators=[django.core.validators.MinValueValidator(-9223372036854775808), django.core.validators.MaxValueValidator(9223372036854775807)], verbose_name='big integer')),
                ('binary_field', models.BinaryField(blank=True, db_column='binary_field_db_column', db_index=True, db_tablespace='binary_field_db_tablespace', default=None, editable=True, error_messages=False, help_text='<small class="text-muted">Бинарные данные (сохранять без преписки b"), example: "OTcwODAxMzUxMTc5"</small><hr><br>', max_length=300, null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='binary_field')),
                ('boolean', models.BooleanField(blank=True, db_column='boolean_db_column', db_index=True, db_tablespace='boolean_db_tablespace', default=False, error_messages=False, help_text='<small class="text-muted">BooleanField</small><hr><br>', unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='boolean')),
                ('null_boolean', models.BooleanField(blank=True, db_column='null_boolean_db_column', db_index=True, db_tablespace='null_boolean_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">BooleanField</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='null_boolean')),
                ('char', models.CharField(blank=True, db_column='char_db_column', db_index=True, db_tablespace='char_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">CharField [0, 300]</small><hr><br>', max_length=300, null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='char')),
                ('text', models.TextField(blank=True, db_column='text_db_column', db_index=True, db_tablespace='text_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">TextField [0, 3000]</small><hr><br>', max_length=3000, null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(3000)], verbose_name='text')),
                ('slug', models.SlugField(blank=True, db_column='slug_db_column', db_tablespace='slug_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">SlugField [0, 300]</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='slug')),
                ('email', models.EmailField(blank=True, db_column='email_db_column', db_index=True, db_tablespace='email_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">email[0, 300]</small><hr><br>', max_length=254, null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='email')),
                ('url_field', models.URLField(blank=True, db_column='url_field_db_column', db_index=True, db_tablespace='url_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Строка содержащая url-адрес, example: "http://89.218.132.130:8000/"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='url_field')),
                ('genericipaddress_field', models.GenericIPAddressField(blank=True, db_column='genericipaddress_field_db_column', db_index=True, db_tablespace='genericipaddress_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Строка содержащая ip-адрес, example: "127.0.0.1"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='genericipaddress_field')),
                ('integer', models.IntegerField(blank=True, db_column='integer_db_column', db_index=True, db_tablespace='integer_db_tablespace', default=0, error_messages=False, help_text='<small class="text-muted">Целочисленное значение от -2147483648 до 2147483647, example: "0"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinValueValidator(-2147483648), django.core.validators.MaxValueValidator(2147483647)], verbose_name='integer')),
                ('float_field', models.FloatField(blank=True, db_column='float_field_db_column', db_index=True, db_tablespace='float_field_db_tablespace', default=0.0, error_messages=False, help_text='<small class="text-muted">Число с плавающей запятой, example: "0.0"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinValueValidator(-1000), django.core.validators.MaxValueValidator(1000)], verbose_name='float_field')),
                ('decimal_field', models.DecimalField(blank=True, db_column='decimal_field_db_column', db_index=True, db_tablespace='decimal_field_db_tablespace', decimal_places=5, default=0.0, error_messages=False, help_text='<small class="text-muted">Нецелочисленное значение, example: "0.000"</small><hr><br>', max_digits=10, null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinValueValidator(-1000), django.core.validators.MaxValueValidator(1000)], verbose_name='decimal_field')),
                ('datetime_field', models.DateTimeField(blank=True, db_column='datetime_field_db_column', db_index=True, db_tablespace='datetime_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">DateTimeField</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='datetime_field')),
                ('date_field', models.DateField(blank=True, db_column='date_field_db_column', db_index=True, db_tablespace='date_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">date_field</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='date_field')),
                ('time_field', models.TimeField(blank=True, db_column='time_field_db_column', db_index=True, db_tablespace='time_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">time_field</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='time_field')),
                ('duration_field', models.DurationField(blank=True, db_column='duration_field_db_column', db_index=True, db_tablespace='duration_field_db_tablespace', default=datetime.timedelta(seconds=1200), error_messages=False, help_text='<small class="text-muted">duration_field</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='duration_field')),
                ('file_field', models.FileField(blank=True, db_column='file_field_db_column', db_index=True, db_tablespace='file_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Файл, с расширением указанным в валидаторе, example: "example.xlsx"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, upload_to='uploads/example/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['xlsx', 'xls'])], verbose_name='file_field')),
                ('image', models.ImageField(blank=True, db_column='image_db_column', db_index=True, db_tablespace='image_db_tablespace', default='uploads/example/example.jpg', error_messages=False, help_text='<small class="text-muted"ImageField [jpg, png]</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, upload_to='uploads/example/example.jpg', validators=[django.core.validators.FileExtensionValidator(['jpg', 'png'])], verbose_name='file_field')),
                ('foreign_key_field', models.ForeignKey(blank=True, db_column='foreign_key_field_db_column', db_tablespace='foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">ForeignKey</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='examples_foreign_key_field', to=settings.AUTH_USER_MODEL, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='foreign_key_field')),
                ('many_to_many_field', models.ManyToManyField(blank=True, db_column='many_to_many_field_db_column', db_index=True, db_tablespace='many_to_many_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">User: many_to_many_field</small><hr><br>', related_name='examples_many_to_many_field', to=settings.AUTH_USER_MODEL, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='many_to_many_field')),
                ('one_to_one_field', models.OneToOneField(blank=True, db_column='one_to_one_field_db_column', db_tablespace='one_to_one_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Связь, с каким-либо объектом, example: "to=User.objects.get(username="Bogdan")"</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='examples_one_to_one_field', to=settings.AUTH_USER_MODEL, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='one_to_one_field')),
            ],
            options={
                'verbose_name': 'Шаблон',
                'verbose_name_plural': 'Admin 0, Шаблоны',
                'db_table': 'example_admin_model_table',
                'ordering': ('-id',),
            },
        ),
    ]
